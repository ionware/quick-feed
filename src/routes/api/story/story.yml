/story:
  description: Defines the operations that can be performed on the **/story** endpoint. Note that some operations requires authentication
  get:
    tags:
      - Story
    description: >
      Get the list of stories. By stories, we mean combination of **Feeds** and **Polls**. By default, a mixture of feeds and polls will be returned, unless altered by the query parameter `type`. Also by default, **30** stories are returned in a page (*this behavior can be of course changed by query parameter `limit`), and the `page` query parameter can be use to skip a page and ask for the next.
      **We recommend thay you do not change this behavior, unless really needed**.
    parameters:
      - name: limit
        in: query
        required: false
        description: Number of `stories` to get per request. Default is `30`.
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        required: false
        description: Specify the skip, the current page to get stories from the paginated result.
        schema:
          type: integer
          format: int32
      - name: type
        in: query
        description: The type of the stories to select. You have two types, `feed` and `poll`.
        schema:
          type: string
          enum:
            - feed
            - poll
    responses:
      '200':
        description: >
          Returns an object that has properties `stories` (an array of stories), `page` (total number of navigate-able pages), `current_page` (the current page ask for) and `total` (the number of story items in `stories` property).
        content:
          application/json:
            schema:
              type: object
              properties:
                total:
                  type: integer
                  example: 30
                current_page:
                  type: integer
                  example: 2
                pages:
                  type: integer
                  example: 4
                  description: Total number of pages, `current_page` cannot exceed the value returned here
                stories:
                  type: array
                  items:
                    type: object
                    description: A single story which could be a `feed` or a `poll`.
                    properties:
                      _id:
                        type: string
                        format: mongooseID
                        example: '56ddf776ef67876efecb765b'
                      type:
                        type: string
                        enum:
                          - feed
                          - poll
                      excerpt:
                        type: string
                        example: Lorem Ipsum dolor
                      createdAt:
                        type: string
                        format: datetime
                        example: 3/30/2020, 12:42:31 AM
                      updatedAt:
                        type: string
                        format: datetime
                        example: 3/30/2020, 12:42:31 AM
                      feed:
                        $ref: '#/components/schemas/Feed'
                      poll:
                        $ref: '#/components/schemas/Poll'

  post:
    tags:
      - Story
    description: >
      Create a new feed or poll. Required Authentication.
    requestBody:
      description: >
        The content of the story to create. Always an `object`, and the `type` will determine the structure of the data that will be included
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                enum:
                  - feed
                  - poll
              excerpt:
                description: A short headline of the `feed` or `poll`.
                type: string
              title:
                description: The title of the `feed` or `poll`.
                type: string
              description:
                description: A verbose description of the `feed` or `poll`.
                type: string
              options:
                description: The options to vote for in the `poll`. **Does not apply** to `feed`.
                type: array
                items:
                  type: string
              end:
                description: The timestamp the `poll` is going to end. **Does not apply** to `feed`.
                type: string
                format: datetime
            required:
              - type
              - excerpt
              - title
    responses:
      '200':
        description: >
          [OK] A typical success response.
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  format: mongooseID
                  example: '56ddf776ef67876efecb765b'
                type:
                  type: string
                  enum:
                    - feed
                    - poll
                excerpt:
                  type: string
                poll:
                  $ref: '#/components/schemas/Poll'
                feed:
                  $ref: '#/components/schemas/Feed'
    security:
      - BearerAuth

/story/{storyId}:
  description: >
    Delete a story (`feed` or `poll`) of the specified `id`.
  parameters:
    - name: storyId
      in: path
      required: true
      description: The `id` of the story to perform operation on.
      schema:
        type: string
  delete:
    tags:
      - Story
    description: >
      Deletes a single story by its `id`. Requires Authentication.
    responses:
      '200':
        description: Story successfully deleted.
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  format: mongooseID
                  example: '56ddf776ef67876efecb765b'
                type:
                  type: string
                  enum:
                    - feed
                    - poll
                excerpt:
                  type: string
                poll:
                  $ref: '#/components/schemas/Poll'
                feed:
                  $ref: '#/components/schemas/Feed'
    security:
      - BearerAuth

components:
  schemas:
    Feed:
      type: object
      properties:
        _id:
          type: string
          format: mongooseID
          example: '56ddf776ef67876efecb765b'
        title:
          type: string
          example: Why couldn't Tom Riddle killed Harry Potter?
        description:
          type: string
          example: A verbose and descriptive description.
        likes:
          type: integer
          example: 498
        comments:
          type: array
          items:
            type: object
          $ref: '#/components/schemas/Comment'
        createdAt:
          type: string
        updatedAt:
          type: string
    Comment:
      type: object
      properties:
        _id:
          type: string
          format: mongooseID
          example: '56ddf776ef67876efecb765b'
        message:
          type: string
          example: It's just a fairy tale. Voldemort was supposed to kill him!
        createdAt:
          type: string
        updatedAt:
          type: string

    Poll:
      type: object
      properties:
        _id:
          type: string
          format: mongooseID
          example: '56ddf776ef67876efecb765b'
        title:
          type: string
          example: Who will you nominate as the best writer?
        options:
          type: array
          items:
            type: string
          example:
            - John Maxwell
            - Stephen Covey
            - Alen James
        votes:
          type: array
          items:
            type: integer
          example:
            - 34
            - 28
            - 19
        end_at:
          type: string
          description: The date time the poll will ends.
          example: 3/30/2020, 12:42:31 AM
        createdAt:
          type: string
        updatedAt:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
